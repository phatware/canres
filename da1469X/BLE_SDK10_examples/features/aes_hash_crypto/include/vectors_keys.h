
/**
****************************************************************************************
* vectors_keys.h
*
* Copyright (C) 2019 Dialog Semiconductor.
* This computer program includes Confidential, Proprietary Information
* of Dialog Semiconductor. All Rights Reserved.
*
****************************************************************************************
*/

#ifndef VECTORS_KEYS_H_
#define VECTORS_KEYS_H_

/* Define an 128-bit base key for AES operations (16*8bits = 128bits) */
const uint8_t key_128b[16] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88,
        0x09, 0xcf, 0x4f, 0x3c };

/* Define an 192-bit base key for AES operations (24*8bits = 192bits) */
const uint8_t key_192b[24] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88,
        0x09, 0xcf, 0x4f, 0x3c, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2 };

/* Define an 256-bit base key for AES operations (32*8bits = 256bits) */
const uint8_t key_256b[32] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88,
        0x09, 0xcf, 0x4f, 0x3c, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2,
		0x52, 0x2c, 0x6b, 0x7b, 0xc8, 0x10, 0xf3, 0x2b };

/* Define an initialization vector (IV) required for the AES CBC algorithm */
const uint8_t iv[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };

/* Define an initialization counter (IC) required for the AES CTR algorithm */
const uint8_t ic[16] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };


/*
 * Define a test vector. This can be anything. Please note that the total size must be multiple of a block size depending on the selected
 * algorithm. Otherwise, data is automatically extended with zeros!
 *
 * mode                | moreDataToCome = true | moreDataToCome = false
 * ------------------- | --------------------- | ----------------------
 * HW_AES_ECB          | multiple of 16        | multiple of 16
 * HW_AES_CBC          | multiple of 16        | no restrictions
 * HW_AES_CTR          | multiple of 16        | no restrictions
 * HW_HASH_MD5         | multiple of 8         | no restrictions
 * HW_HASH_SHA_1       | multiple of 8         | no restrictions
 * HW_HASH_SHA_256_224 | multiple of 8         | no restrictions
 * HW_HASH_SHA_256     | multiple of 8         | no restrictions
 * HW_HASH_SHA_384     | multiple of 8         | no restrictions
 * HW_HASH_SHA_512     | multiple of 8         | no restrictions
 * HW_HASH_SHA_512_224 | multiple of 8         | no restrictions
 * HW_HASH_SHA_512_256 | multiple of 8         | no restrictions
 */
const uint8_t vector[64] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11,
        0x73, 0x93, 0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f,
        0xac, 0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
        0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad,
        0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };

/*
 * Cipher for AES CBC 128-bit encryption of the test vector. We have pre-calculated it. This buffer contains the encrypted data of the
 * test vector.
 */
const uint8_t cbc_128b_cipher[64] = { 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e,
        0x9b, 0x12, 0xe9, 0x19, 0x7d, 0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb,
        0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2, 0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71,
        0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16, 0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09,
        0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7 };

/*
 * Cipher for AES CTR 192-bit encryption of the test vector. We have pre-calculated it. This buffer contains the encrypted data of the
 * test vector.
 */
const uint8_t ctr_192b_cipher[64] = { 0xEC, 0xF0, 0x27, 0x6C, 0x81, 0x82, 0x62, 0x7E, 0xA8, 0x51, 0xAA,
        0xEF, 0x8E, 0xE8, 0x59, 0xC7, 0xAE, 0x12, 0x9E, 0x18, 0x14, 0xC7, 0xB4, 0x62, 0x28, 0xAF,
        0x30, 0x94, 0x12, 0xB6, 0x36, 0x83, 0xAA, 0x6C, 0x81, 0x68, 0xF8, 0xC4, 0xAA, 0xF0, 0x10,
        0x97, 0xB8, 0xAB, 0xA0, 0x3B, 0x1E, 0x17, 0xA8, 0xC8, 0x2B, 0xD2, 0xDA, 0xE9, 0x9B, 0xC4,
        0x50, 0x06, 0x0F, 0x23, 0xDD, 0xD7, 0xB1, 0x52 };

/*
 * Cipher for AES CBC 256-bit encryption of the test vector. We have pre-calculated it. This buffer contains the encrypted data of the
 * test vector.
 */
const uint8_t cbc_256b_cipher[64] = { 0x99, 0xB4, 0xC5, 0x9B, 0xC8, 0x21, 0x7B, 0xD8, 0xBC, 0x53, 0x1B,
        0xC6, 0x8D, 0x37, 0x0C, 0x3B, 0x73, 0xF6, 0x30, 0x62, 0x14, 0xC3, 0xB5, 0xFE, 0xC6, 0x9F,
        0xA4, 0xEF, 0xE9, 0x2E, 0xF4, 0xEB, 0xFA, 0x04, 0x7C, 0x0A, 0x9A, 0x92, 0xE3, 0xF5, 0x6D,
        0x93, 0x2D, 0xBE, 0xF1, 0xAB, 0x19, 0xD6, 0x9F, 0xB4, 0x16, 0x69, 0xFC, 0x00, 0xB7, 0xE6,
        0x53, 0x4F, 0x01, 0xFF, 0xC8, 0x1D, 0xF3, 0x83 };


/* SHA-256 HASHING for the content: "This is confidential!". We have pre-calculated it. */
const uint8_t sha_256_hash[32] = { 0x45, 0x3b, 0x2c, 0xf5, 0x95, 0x64, 0x26, 0x7e, 0xf6, 0x04, 0x84, 0x85,
                0x5b, 0x00, 0x66, 0x3b, 0xaa, 0xfe, 0xe5, 0x96, 0xc6, 0x4d, 0x78, 0xd3, 0x9b, 0xae, 0x45, 0x5a,
                0x69, 0x41, 0x03, 0xa3

};

#endif /* VECTORS_KEYS_H_ */
