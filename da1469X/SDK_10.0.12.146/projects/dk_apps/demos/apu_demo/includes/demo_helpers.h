/**
 ****************************************************************************************
 *
 * @file demo_helpers.h
 *
 * @brief Common definitions for APU demo
 *
 * Copyright (C) 2021 Dialog Semiconductor.
 * This computer program includes Confidential, Proprietary Information
 * of Dialog Semiconductor. All Rights Reserved.
 *
 ****************************************************************************************
 */

#ifndef DEMO_HELPERS_H_
#define DEMO_HELPERS_H_

#define SIN_DATA_SR_8K_F_1K             (0)
#define COS_DATA_SR_8K_F_1K             (0)
#define SIN_DATA_SR_96K_F_1K            (0)
#define SIN_DATA_SR_192K_F_12K          (0)
#define COS_DATA_SR_192K_F_12K          (0)
#define SIN_DATA_SR_192K_F_19_2K        (0)
#define COS_DATA_SR_192K_F_19_2K        (0)
#define SIN_DATA_SR_8K_TO_96K_F_1K      (1)

#if (SIN_DATA_SR_8K_F_1K + COS_DATA_SR_8K_F_1K + SIN_DATA_SR_96K_F_1K + SIN_DATA_SR_192K_F_12K + COS_DATA_SR_192K_F_12K + SIN_DATA_SR_192K_F_19_2K + COS_DATA_SR_192K_F_19_2K + SIN_DATA_SR_8K_TO_96K_F_1K != 1)
#error "One audio demo data input should be selected!!!"
#endif

# if SIN_DATA_SR_8K_F_1K || COS_DATA_SR_8K_F_1K || SIN_DATA_SR_96K_F_1K || SIN_DATA_SR_8K_TO_96K_F_1K
#define SIGNAL_INPUT_FREQ                       1000
# elif  SIN_DATA_SR_192K_F_19_2K || COS_DATA_SR_192K_F_19_2K
#define SIGNAL_INPUT_FREQ                       2000
# elif SIN_DATA_SR_192K_F_12K || COS_DATA_SR_192K_F_12K
#define SIGNAL_INPUT_FREQ                       12000
# endif

#if SIN_DATA_SR_8K_F_1K
/* SR: 8kHz f: 1KHz */

const int32_t pcm_sin_data[8] = {
        0x00000000,     0x5a82799a,     0x7fffffff,     0x5a82799a,
        0x00000000,     0xa57d8666,     0x80000000,     0xa57d8666,
};
#endif

#if COS_DATA_SR_8K_F_1K
/* SR: 8kHz f: 1KHz */

const int32_t pcm_cos_data[8] = {
        0x7fffffff,     0x5a82799a,     0x00000000,     0xa57d8666,
        0x80000000,     0xa57d8666,     0x00000000,     0x5a82799a,
};
#endif

#if SIN_DATA_SR_96K_F_1K
/* SR: 96kHz f: 1KHz */

const int32_t pcm_sin_data[96] = {
        0x00000000,     0x085f2137,     0x10b5150f,     0x18f8b83c,
        0x2120fb83,     0x2924edac,     0x30fbc54d,     0x389cea72,
        0x40000000,     0x471cece7,     0x4debe4fe,     0x54657194,
        0x5a82799a,     0x603c496c,     0x658c9a2d,     0x6a6d98a4,
        0x6ed9eba1,     0x72ccb9db,     0x7641af3d,     0x793501a9,
        0x7ba3751d,     0x7d8a5f40,     0x7ee7aa4c,     0x7fb9d759,
        0x7fffffff,     0x7fb9d759,     0x7ee7aa4c,     0x7d8a5f40,
        0x7ba3751d,     0x793501a9,     0x7641af3d,     0x72ccb9db,
        0x6ed9eba1,     0x6a6d98a4,     0x658c9a2d,     0x603c496c,
        0x5a82799a,     0x54657194,     0x4debe4fe,     0x471cece7,
        0x40000000,     0x389cea72,     0x30fbc54d,     0x2924edac,
        0x2120fb83,     0x18f8b83c,     0x10b5150f,     0x085f2137,
        0x00000000,     0xf7a0dec9,     0xef4aeaf1,     0xe70747c4,
        0xdedf047d,     0xd6db1254,     0xcf043ab3,     0xc763158e,
        0xc0000000,     0xb8e31319,     0xb2141b02,     0xab9a8e6c,
        0xa57d8666,     0x9fc3b694,     0x9a7365d3,     0x9592675c,
        0x9126145f,     0x8d334625,     0x89be50c3,     0x86cafe57,
        0x845c8ae3,     0x8275a0c0,     0x811855b4,     0x804628a7,
        0x80000000,     0x804628a7,     0x811855b4,     0x8275a0c0,
        0x845c8ae3,     0x86cafe57,     0x89be50c3,     0x8d334625,
        0x9126145f,     0x9592675c,     0x9a7365d3,     0x9fc3b694,
        0xa57d8666,     0xab9a8e6c,     0xb2141b02,     0xb8e31319,
        0xc0000000,     0xc763158e,     0xcf043ab3,     0xd6db1254,
        0xdedf047d,     0xe70747c4,     0xef4aeaf1,     0xf7a0dec9,
};
#endif

#if COS_DATA_SR_96K_F_1K
/* SR: 96kHz f: 1KHz */

const int32_t pcm_cos_data[96] = {
        0x7fffffff,     0x7fb9d759,     0x7ee7aa4c,     0x7d8a5f40,
        0x7ba3751d,     0x793501a9,     0x7641af3d,     0x72ccb9db,
        0x6ed9eba1,     0x6a6d98a4,     0x658c9a2d,     0x603c496c,
        0x5a82799a,     0x54657194,     0x4debe4fe,     0x471cece7,
        0x40000000,     0x389cea72,     0x30fbc54d,     0x2924edac,
        0x2120fb83,     0x18f8b83c,     0x10b5150f,     0x085f2137,
        0x00000000,     0xf7a0dec9,     0xef4aeaf1,     0xe70747c4,
        0xdedf047d,     0xd6db1254,     0xcf043ab3,     0xc763158e,
        0xc0000000,     0xb8e31319,     0xb2141b02,     0xab9a8e6c,
        0xa57d8666,     0x9fc3b694,     0x9a7365d3,     0x9592675c,
        0x9126145f,     0x8d334625,     0x89be50c3,     0x86cafe57,
        0x845c8ae3,     0x8275a0c0,     0x811855b4,     0x804628a7,
        0x80000000,     0x804628a7,     0x811855b4,     0x8275a0c0,
        0x845c8ae3,     0x86cafe57,     0x89be50c3,     0x8d334625,
        0x9126145f,     0x9592675c,     0x9a7365d3,     0x9fc3b694,
        0xa57d8666,     0xab9a8e6c,     0xb2141b02,     0xb8e31319,
        0xc0000000,     0xc763158e,     0xcf043ab3,     0xd6db1254,
        0xdedf047d,     0xe70747c4,     0xef4aeaf1,     0xf7a0dec9,
        0x00000000,     0x085f2137,     0x10b5150f,     0x18f8b83c,
        0x2120fb83,     0x2924edac,     0x30fbc54d,     0x389cea72,
        0x40000000,     0x471cece7,     0x4debe4fe,     0x54657194,
        0x5a82799a,     0x603c496c,     0x658c9a2d,     0x6a6d98a4,
        0x6ed9eba1,     0x72ccb9db,     0x7641af3d,     0x793501a9,
        0x7ba3751d,     0x7d8a5f40,     0x7ee7aa4c,     0x7fb9d759,
};
#endif

#if SIN_DATA_SR_192K_F_12K
/* SR: 192kHz f: 12kHz */

const int32_t pcm_sin_data[16] = {
        0x00000000,    0x30fbc54d,     0x5a82799a,     0x7641af3d,
        0x7fffffff,    0x7641af3d,     0x5a82799a,     0x30fbc54d,
        0x00000000,    0xcf043ab3,     0xa57d8666,     0x89be50c3,
        0x80000000,    0x89be50c3,     0xa57d8666,     0xcf043ab3,
};
#endif

#if COS_DATA_SR_192K_F_12K
/* SR: 192kHz f: 12kHz */

const int32_t pcm_cos_data[16] = {
        0x7fffffff,    0x7641af3d,     0x5a82799a,     0x30fbc54d,
        0x00000000,    0xcf043ab3,     0xa57d8666,     0x89be50c3,
        0x80000000,    0x89be50c3,     0xa57d8666,     0xcf043ab3,
        0x00000000,    0x30fbc54d,     0x5a82799a,     0x7641af3d,
};
#endif

#if SIN_DATA_SR_192K_F_19_2K
/* SR: 192kHz f: 19,2kHz */

const int32_t pcm_sin_data[10] = {
    0x00000000, 0x4b3c8c12, 0x79bc384d, 0x79bc384d, 0x4b3c8c12, 0x00000000, 0xb4c373ee,0x8643c7b3, 0x8643c7b3, 0xb4c373ee};
#endif

#if COS_DATA_SR_192K_F_19_2K
/* SR: 192kHz f: 19,2kHz */

const int32_t pcm_cos_data[10] = {
    0x7fffffff, 0x678dde6e, 0x278dde6e, 0xd8722192, 0x98722192, 0x80000000, 0x98722192, 0xd8722192, 0x278dde6e, 0x678dde6e};
#endif

#if SIN_DATA_SR_8K_TO_96K_F_1K
/* SR: 8kHz - 96KHz f: 1kHz */

const int32_t pcm_sin_data[384] = {
                0,    17568276,    35131848,    52686014,    70226075,    87747335,   105245103,   122714694,
        140151432,   157550647,   174907683,   192217891,   209476638,   226679303,   243821281,   260897982,
        277904834,   294837284,   311690799,   328460867,   345142998,   361732726,   378225609,   394617232,
        410903207,   427079173,   443140799,   459083786,   474903865,   490596801,   506158392,   521584472,
        536870912,   552013618,   567008537,   581851654,   596538995,   611066629,   625430665,   639627258,
        653652607,   667502958,   681174602,   694663879,   707967178,   721080937,   734001645,   746725843,
        759250125,   771571137,   783685581,   795590213,   807281846,   818757351,   830013654,   841047743,
        851856663,   862437520,   872787482,   882903777,   892783698,   902424599,   911823899,   920979082,
        929887697,   938547358,   946955747,   955110613,   963009773,   970651112,   978032585,   985152214,
        992008094,   998598390,  1004921337,  1010975242,  1016758484,  1022269516,  1027506862,  1032469119,
        1037154959,  1041563127,  1045692444,  1049541804,  1053110176,  1056396605,  1059400211,  1062120190,
        1064555814,  1066706430,  1068571464,  1070150415,  1071442860,  1072448455,  1073166929,  1073598091,
        1073741824,  1073598091,  1073166929,  1072448455,  1071442860,  1070150415,  1068571464,  1066706430,
        1064555814,  1062120190,  1059400211,  1056396605,  1053110176,  1049541804,  1045692444,  1041563127,
        1037154959,  1032469119,  1027506862,  1022269516,  1016758484,  1010975242,  1004921337,   998598390,
        992008094,   985152214,   978032585,   970651112,   963009773,   955110613,   946955747,   938547358,
        929887697,   920979082,   911823899,   902424599,   892783698,   882903777,   872787482,   862437520,
        851856663,   841047743,   830013654,   818757351,   807281846,   795590213,   783685581,   771571137,
        759250125,   746725843,   734001645,   721080937,   707967178,   694663879,   681174602,   667502958,
        653652607,   639627258,   625430665,   611066629,   596538995,   581851654,   567008537,   552013618,
        536870912,   521584472,   506158392,   490596801,   474903865,   459083786,   443140799,   427079173,
        410903207,   394617232,   378225609,   361732726,   345142998,   328460867,   311690799,   294837284,
        277904834,   260897982,   243821281,   226679303,   209476638,   192217891,   174907683,   157550647,
        140151432,   122714694,   105245103,    87747335,    70226075,    52686014,    35131848,    17568276,
                0,   -17568276,   -35131848,   -52686014,   -70226075,   -87747335,  -105245103,  -122714694,
        -140151432,  -157550647,  -174907683,  -192217891,  -209476638,  -226679303,  -243821281,  -260897982,
        -277904834,  -294837284,  -311690799,  -328460867,  -345142998,  -361732726,  -378225609,  -394617232,
        -410903207,  -427079173,  -443140799,  -459083786,  -474903865,  -490596801,  -506158392,  -521584472,
        -536870912,  -552013618,  -567008537,  -581851654,  -596538995,  -611066629,  -625430665,  -639627258,
        -653652607,  -667502958,  -681174602,  -694663879,  -707967178,  -721080937,  -734001645,  -746725843,
        -759250125,  -771571137,  -783685581,  -795590213,  -807281846,  -818757351,  -830013654,  -841047743,
        -851856663,  -862437520,  -872787482,  -882903777,  -892783698,  -902424599,  -911823899,  -920979082,
        -929887697,  -938547358,  -946955747,  -955110613,  -963009773,  -970651112,  -978032585,  -985152214,
        -992008094,  -998598390, -1004921337, -1010975242, -1016758484, -1022269516, -1027506862, -1032469119,
        -1037154959, -1041563127, -1045692444, -1049541804, -1053110176, -1056396605, -1059400211, -1062120190,
        -1064555814, -1066706430, -1068571464, -1070150415, -1071442860, -1072448455, -1073166929, -1073598091,
        -1073741824, -1073598091, -1073166929, -1072448455, -1071442860, -1070150415, -1068571464, -1066706430,
        -1064555814, -1062120190, -1059400211, -1056396605, -1053110176, -1049541804, -1045692444, -1041563127,
        -1037154959, -1032469119, -1027506862, -1022269516, -1016758484, -1010975242, -1004921337,  -998598390,
        -992008094,  -985152214,  -978032585,  -970651112,  -963009773,  -955110613,  -946955747,  -938547358,
        -929887697,  -920979082,  -911823899,  -902424599,  -892783698,  -882903777,  -872787482,  -862437520,
        -851856663,  -841047743,  -830013654,  -818757351,  -807281846,  -795590213,  -783685581,  -771571137,
        -759250125,  -746725843,  -734001645,  -721080937,  -707967178,  -694663879,  -681174602,  -667502958,
        -653652607,  -639627258,  -625430665,  -611066629,  -596538995,  -581851654,  -567008537,  -552013618,
        -536870912,  -521584472,  -506158392,  -490596801,  -474903865,  -459083786,  -443140799,  -427079173,
        -410903207,  -394617232,  -378225609,  -361732726,  -345142998,  -328460867,  -311690799,  -294837284,
        -277904834,  -260897982,  -243821281,  -226679303,  -209476638,  -192217891,  -174907683,  -157550647,
        -140151432,  -122714694,  -105245103,   -87747335,   -70226075,   -52686014,   -35131848,  -17568276
};
#endif

/*
 * Creates the sine/cosine signal with the requested frequency, bit depth, sample rate
 *
 * \param[in]  pcm_data          the reference table of the signal data (sine or cosine)
 * \param[in]  pcm_data_len      the length of the reference table of the signal data
 * \param[in]  data_len          the length of the requested signal data
 * \param[in]  sampling_rate     the sampling rate of the signal
 * \param[in]  signal_frequency  the frequency of the signal
 * \param[in]  bits_depth        the bit depth of the signal
 * \param[out] data              the requested signal data
 *
 * \note for pcm_data pcm_sin_data or pcm_cos_data can be used
 */
void demo_set_sinusoidal_pattern(uint32_t *data, uint32_t data_len, const int32_t *pcm_data, uint16_t pcm_data_len,
        uint32_t sampling_rate, uint32_t signal_frequency, uint32_t bits_depth);
#endif /* DEMO_HELPERS_H_ */
